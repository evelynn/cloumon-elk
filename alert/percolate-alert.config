input {
  exec {
    command => '/home/gmonitor/cloumon/alert/get-latest-metrics.sh http://{es_host}:5911 default-system-http-metrics' 
    interval => 60
  }
  exec {
    command => '/home/gmonitor/cloumon/alert/get-latest-metrics.sh http://{es_host}:5911 default-flume-jmx-metrics' 
    interval => 60
  }
  exec {
    command => '/home/gmonitor/cloumon/alert/get-latest-metrics.sh http://{es_host}:5911 default-hadoop-jmx-metrics' 
    interval => 60
  }
  exec {
    command => '/home/gmonitor/cloumon/alert/get-latest-metrics.sh http://{es_host}:5911 default-elasticsearch-http-metrics' 
    interval => 60
  }
  exec {
    command => '/home/gmonitor/cloumon/alert/get-latest-metrics.sh http://{es_host}:5911 default-tajo-ganglia-metrics' 
    interval => 60
  }
  exec {
    command => '/home/gmonitor/cloumon/alert/get-latest-metrics.sh http://{es_host}:5911 default-system-http-metrics' 
    interval => 60
  }
}


filter {
  ruby {
    init => "
      require 'json'
      require 'elasticsearch'
      require 'time'

      def get_key_if_exists(hash, key)
        key if hash.has_key?(key)
      end

      def get_hostkey(hash)
        hosts_keys = ['hostname', 'log_host', 'host']
        hosts_keys.each do |h|
          k = get_key_if_exists(hash, h)
          return k if k
        end
        nil
      end

      # Elasticsearch hosts of the cluster
      @hosts=['{es_host}:5911']

      # Basic Auth - username, optional
      @user=nil
      # Basic Auth - password, optional
      @password=nil
      # SSL, boolean, optional
      @ssl=nil
      # SSL Certificate Authority file, optional
      @ca_file=nil

      transport_options = {} 

      if @user && @password
        token = Base64.strict_encode64(@user + ':' + @password)
        transport_options[:headers] = { Authoirzation: 'Basic ' + token }
      end

      @hosts = if @ssl then
        @hosts.map {|h| { host: h, scheme: 'https' } }
      else
        @hosts
      end

      if @ssl && @ca_file
        transport_options[:ssl] = { ca_file: ca_file }
      end

      @es_client = Elasticsearch::Client.new hosts: @hosts, transport_options: transport_options, retry_on_failure: true, reload_connections: true
    "
    code => "
      metrics_data = []
      percolate_data = []
      es_result = {}
      begin
        es_result = JSON.parse(event['message'])
      rescue
        @logger.error('data format error:' + event['message'])
        event.cancel
        return
      end

      if not es_result.has_key?('hits') or es_result['hits']['hits'].size() == 0
        event.cancel
        return
      end

      es_result['hits']['hits'].each do |doc|
        metric_key = doc['_source'].has_key?('metric_name') ? 'metric_name' : 'name'
        host_key = get_hostkey(doc['_source'])

    	  if not doc['_source'][metric_key]
          @logger.error('strange data format: ' + doc['_source'].to_json())
          next
        end

        key = doc['_source'][metric_key] + '-'
        key += doc['_source'][host_key] if host_key

        metrics_data.push doc['_source']
        percolate_data.push percolate: { index: 'alert-percolator', type: 'metrics' }
        percolate_data.push doc: doc['_source']
      end
      
      percolate_result = {}
      begin
        percolate_result = @es_client.mpercolate(body: percolate_data)
      rescue
        event.cancel
        return
      end
      
      if not percolate_result.has_key?('responses')
        event.cancel
        return
      end

      alert_metrics = {}
      alert_time = nil
      percolate_result['responses'].each.with_index(0) do |item, i|
        if item.has_key?('total') and item['total'] > 0
          metric_key = metrics_data[i].has_key?('metric_name') ? 'metric_name' : 'name'
          host_key = get_hostkey(metrics_data[i])
          value_key = metrics_data[i].has_key?('metric_value') ? 'metric_value': 'val_double'
          metric_val = metrics_data[i][metric_key]
          host_val = metrics_data[i][host_key] if host_key
          value_val = metrics_data[i][value_key].to_s
          time_val = Time.parse(metrics_data[i]['@timestamp'])

          alert_metrics[metric_val] = [] if not alert_metrics[metric_val]
          alert_metrics[metric_val].push m: host_val, v: value_val
          alert_time = time_val.getlocal.to_s if not alert_time
        end
      end

      if alert_metrics.size() == 0
        event.cancel
        return
      end 

      alert_content = 'Metrics meeting the conditions at ' << alert_time << '\n\n'
      alert_metrics.each do |val, alerts|
        alert_content << val << '\n'
        alerts.each do |alert|
          alert_content << '        ' << if alert[:m] then alert[:m] << ' is ' else '' end << alert[:v] << '\n'
        end
        alert_content << '\n'
      end

      event['message'] = alert_content
    "
  }
}


output {
#  email {
#    to => ""
#    from => ""
#    subject => "Warning: There're metrics over threshold."
#    body => "%{message}"
#    options => {
#      smtpIporHost => 'smtp.gmail.com'
#      port => '587'
#      domain => 'smtp.gmail.com'
#      authenticationType => 'plain'
#      userName => ''
#      password => ''
#      starttls => true
#    }   
#  }
}
