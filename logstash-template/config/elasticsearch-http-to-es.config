input {
  http_poller {
    urls => {
      "stats" => "http://{es_host}/_nodes/stats?human=true" 
      "health" => "http://{es_host}/_cluster/health" 
      "cluster_state" => "http://{es_host}/_cluster/state/nodes,master_node"
      "node_routing_state" => "http://{es_host}/_cluster/state/nodes,routing_table?human=true"
      "status" => "http://{es_host}/_status"
    }
    interval => 60
    codec => "plain" 
  }
}

filter {
  ruby {
    init => " 
      require 'json'
      def flatten_with_path(obj, parent_prefix = nil)
        res = {}

        obj.each_with_index do |elem, i|
          if elem.is_a?(Array)
            k, v = elem
          else
            k, v = i, elem
          end

          key = parent_prefix ? parent_prefix + '.' + k.to_s : k # assign key name for result hash

          if v.is_a? Enumerable
            res.merge!(flatten_with_path(v, key)) # recursive call to flatten child elements
          else
            res[key] = v
          end
        end

        res
      end

      def filter(event, &block)
        begin
          obj = JSON.parse(event['message'])
          prefix = event['@metadata']['name']
          r = flatten_with_path(obj, prefix)
          r.each do |k, v|
            o = {'name' => k}
            if v.is_a? Numeric
              o['val_double'] = v
            else
              o['val_str'] = v.to_s if v.respond_to? 'to_s'
            end
            e = LogStash::Event.new(o)
            yield e
          end
          event.cancel
        end
      rescue
        @logger.warn('message is invalid json string')
      end
    " 
    code => " 
    " 
  }
}
output {
	elasticsearch_java {
    network_host => "0.0.0.0"
		protocol => "transport"
		cluster => "cloumon-elk"
		hosts => {es_hosts}
		index => "{cluster_name}-elasticsearch-http-metrics-%{+YYYY.MM.dd}"
	}
}
